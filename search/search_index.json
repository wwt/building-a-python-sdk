{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Learn to Build a Basic Python SDK Practice is critical in acquiring any new skill and automation is no exception. This repository will walk you through the creation of a simple, non-production Python SDK. The goal is not to create a production quality Python SDK since these already exist for many of the Cisco products, but rather to provide some guided practice using many of the requisite skills of an automation engineer today. Some of the skills you will practice in this walk-through are: Docker and Development Environments Version Control Basic Linux Commands Python Fundamentals Common Data Formats (specifically JSON) REST APIs Development Design Patterns and Methodology Through the remainder of this guide you will be walked, step-by-step, through the process of building your own SDK. Prerequisite Skills This walk-through assumes knowledge of: git Docker Python Fundamentals REST APIs What are you going to build? Through this guided walk-through you will build a \"relatively\" simple Python Software Development Kit (SDK) to interface with Cisco's DNA Center. Fundamentally, this SDK will have the following high-level architecture: The two Python modules together will enable the communication with DNA Center. session.py will be responsible for maintaining the attributes related to establishing an HTTP session with the target host and client.py will act as the interface for the consumer of your SDK. Next Up The objective of this walk-through is simply to provide some guided practice of some of they key skills in the development and automation lifecycle. Feel free to deviate off course to experience and practice outside of the confines of this walk-through. Next, you will have the opportunity to practice some basic version control, Docker, and basic Linux skills getting the the project environment setup.","title":"Home"},{"location":"#learn-to-build-a-basic-python-sdk","text":"Practice is critical in acquiring any new skill and automation is no exception. This repository will walk you through the creation of a simple, non-production Python SDK. The goal is not to create a production quality Python SDK since these already exist for many of the Cisco products, but rather to provide some guided practice using many of the requisite skills of an automation engineer today. Some of the skills you will practice in this walk-through are: Docker and Development Environments Version Control Basic Linux Commands Python Fundamentals Common Data Formats (specifically JSON) REST APIs Development Design Patterns and Methodology Through the remainder of this guide you will be walked, step-by-step, through the process of building your own SDK.","title":"Learn to Build a Basic Python SDK"},{"location":"#prerequisite-skills","text":"This walk-through assumes knowledge of: git Docker Python Fundamentals REST APIs","title":"Prerequisite Skills"},{"location":"#what-are-you-going-to-build","text":"Through this guided walk-through you will build a \"relatively\" simple Python Software Development Kit (SDK) to interface with Cisco's DNA Center. Fundamentally, this SDK will have the following high-level architecture: The two Python modules together will enable the communication with DNA Center. session.py will be responsible for maintaining the attributes related to establishing an HTTP session with the target host and client.py will act as the interface for the consumer of your SDK.","title":"What are you going to build?"},{"location":"#next-up","text":"The objective of this walk-through is simply to provide some guided practice of some of they key skills in the development and automation lifecycle. Feel free to deviate off course to experience and practice outside of the confines of this walk-through. Next, you will have the opportunity to practice some basic version control, Docker, and basic Linux skills getting the the project environment setup.","title":"Next Up"},{"location":"conclusion/","text":"Conclusion","title":"Wrap up"},{"location":"conclusion/#conclusion","text":"","title":"Conclusion"},{"location":"module-0/","text":"Getting Setup As with any development project there are some initial setup steps that are required to get things rolling. In the case of this walk-through, the repository already exists as a starting point. The section walks you through the process of cloning that repository down to your local machine, activating the development environment, and opening the project in your Integrated Development Environment. Clone the Repo One of the very first skills you learn when starting the journey to becoming an automation engineer is version control. This is a key skill in the development/automation lifecycle. There are many, many command line options and details to understand about git but in regular and daily workflow you will find yourself using a subset of them. Many IDE's provide version control integration that allows you to utilize the UI in order to perform many of these functions. You can chose what method works best for your personal workflow. The steps below show how to clone a repo from a terminal window. STEPS STEP 1. NAVIGATE to the repo on GitHub devasc-building-a-python-sdk STEP 2. CLICK the Code button STEP 3. SELECT the transport (HTTPS or SSH) STEP 4. CLICK the Copy icon STEP 5. OPEN a new Terminal STEP 6. PASTE git clone plus that string into your Terminal Example SSH git clone git@github.com:wwt/devasc-building-a-python-sdk.git HTTPS git clone https://github.com/wwt/devasc-building-a-python-sdk.git Important The command above will clone down the repository creating a subfolder with the name of the repo in the folder where you ran the command. Development Environment All code in this walk-through was developed in a Docker container that was created from the Dockerfile included in the repository. Including the Dockerfile in the repository means we can avoid the \"...it works on my machine problem...\" By using containers and also makes the container definition travel adjacent to the code. Below will cover using the Docker container for your execution environment. Just click the tab that meets your needs: STEP 1. OPEN the new Folder in your Integrated Development Environment Visual Studio Code If you are running Visual Studio Code as your IDE, and have the Remove Development Extension pack installed ( ms-vscode-remote.vscode-remote-extensionpack ) you can simply open the root directory of this project, then select Open in Container when prompted (dialog box in the lower right corner). The repository contains a portable development environment in the form of a Dockerfile , requirements.txt , and .devcontainer.json files. This special integration with Visual Studio Code simplifies developing in a containerized development environment non-Visual Studio Code If you are not using Visual Studio Code you can still utilize the Dockerfile packaged with the repository but some manual build and launch steps will be necessary. Ensure you are in the root of the ansible-validate-example project BUILD the Docker Image docker image build -t ansible-validate-lab . RUN the Docker Container docker container run -itv $PWD:/ansible-validate-example ansible-validate-lab This repo contains a starting framework from which you will expand to build a Python SDK. Section Wrap up In this section, you used your knowledge of version control to clone down a shared repository, initialize the Docker container, and open the project in your preferred editor. These are some of the most fundamental steps in getting started on your shared project. Next, you'll start the SDK project by creating a Python package. It's OK if you are not experienced with creating a Python package; the following sections will walk you through that process.","title":"Setup"},{"location":"module-0/#getting-setup","text":"As with any development project there are some initial setup steps that are required to get things rolling. In the case of this walk-through, the repository already exists as a starting point. The section walks you through the process of cloning that repository down to your local machine, activating the development environment, and opening the project in your Integrated Development Environment.","title":"Getting Setup"},{"location":"module-0/#clone-the-repo","text":"One of the very first skills you learn when starting the journey to becoming an automation engineer is version control. This is a key skill in the development/automation lifecycle. There are many, many command line options and details to understand about git but in regular and daily workflow you will find yourself using a subset of them. Many IDE's provide version control integration that allows you to utilize the UI in order to perform many of these functions. You can chose what method works best for your personal workflow. The steps below show how to clone a repo from a terminal window.","title":"Clone the Repo"},{"location":"module-0/#steps","text":"STEP 1. NAVIGATE to the repo on GitHub devasc-building-a-python-sdk STEP 2. CLICK the Code button STEP 3. SELECT the transport (HTTPS or SSH) STEP 4. CLICK the Copy icon STEP 5. OPEN a new Terminal STEP 6. PASTE git clone plus that string into your Terminal Example SSH git clone git@github.com:wwt/devasc-building-a-python-sdk.git HTTPS git clone https://github.com/wwt/devasc-building-a-python-sdk.git Important The command above will clone down the repository creating a subfolder with the name of the repo in the folder where you ran the command.","title":"STEPS"},{"location":"module-0/#development-environment","text":"All code in this walk-through was developed in a Docker container that was created from the Dockerfile included in the repository. Including the Dockerfile in the repository means we can avoid the \"...it works on my machine problem...\" By using containers and also makes the container definition travel adjacent to the code. Below will cover using the Docker container for your execution environment. Just click the tab that meets your needs: STEP 1. OPEN the new Folder in your Integrated Development Environment Visual Studio Code If you are running Visual Studio Code as your IDE, and have the Remove Development Extension pack installed ( ms-vscode-remote.vscode-remote-extensionpack ) you can simply open the root directory of this project, then select Open in Container when prompted (dialog box in the lower right corner). The repository contains a portable development environment in the form of a Dockerfile , requirements.txt , and .devcontainer.json files. This special integration with Visual Studio Code simplifies developing in a containerized development environment non-Visual Studio Code If you are not using Visual Studio Code you can still utilize the Dockerfile packaged with the repository but some manual build and launch steps will be necessary. Ensure you are in the root of the ansible-validate-example project BUILD the Docker Image docker image build -t ansible-validate-lab . RUN the Docker Container docker container run -itv $PWD:/ansible-validate-example ansible-validate-lab This repo contains a starting framework from which you will expand to build a Python SDK.","title":"Development Environment"},{"location":"module-0/#section-wrap-up","text":"In this section, you used your knowledge of version control to clone down a shared repository, initialize the Docker container, and open the project in your preferred editor. These are some of the most fundamental steps in getting started on your shared project. Next, you'll start the SDK project by creating a Python package. It's OK if you are not experienced with creating a Python package; the following sections will walk you through that process.","title":"Section Wrap up"},{"location":"module-1/","text":"Create a Python Package In this section you will create a Python package that will become your DNA Center SDK. Packages are namespaces which contain multiple packages and modules themselves. They are simply directories, but with a twist. Each package in Python is a directory which MUST contain a special file called __init__.py . This file can be empty, and it indicates that the directory it contains is a Python package, so it can be imported the same way a module can be imported. ref: https://www.learnpython.org/en/Modules_and_Packages Steps The first task is to create the package that will contain our Python modules. Note __init__.py is technically not required as of Python 3.3 STEP 1. CREATE a folder named dnac mkdir dnac STEP 2. CREATE a file named init .py in the dnac folder touch dnac/__init__.py STEP 3. MODIFY the file permissions to add execute chmod +x dnac/__init__.py Can you import this package? If you completed these steps you can now import your package in the python interpreter. That's exciting! You just created your first Python package. Although it doesn't have any functional purpose yet, you learned some of the foundational mechanics required to start the process.","title":"Python Package"},{"location":"module-1/#create-a-python-package","text":"In this section you will create a Python package that will become your DNA Center SDK. Packages are namespaces which contain multiple packages and modules themselves. They are simply directories, but with a twist. Each package in Python is a directory which MUST contain a special file called __init__.py . This file can be empty, and it indicates that the directory it contains is a Python package, so it can be imported the same way a module can be imported. ref: https://www.learnpython.org/en/Modules_and_Packages","title":"Create a Python Package"},{"location":"module-1/#steps","text":"The first task is to create the package that will contain our Python modules. Note __init__.py is technically not required as of Python 3.3 STEP 1. CREATE a folder named dnac mkdir dnac STEP 2. CREATE a file named init .py in the dnac folder touch dnac/__init__.py STEP 3. MODIFY the file permissions to add execute chmod +x dnac/__init__.py Can you import this package? If you completed these steps you can now import your package in the python interpreter. That's exciting! You just created your first Python package. Although it doesn't have any functional purpose yet, you learned some of the foundational mechanics required to start the process.","title":"Steps"},{"location":"module-2/","text":"Create a Python Module: session Packages are directories that contain the __init.py__ file and some number of Python files called modules. This section will guide you through creating the first Python module to accomplish the REST Client functionality. Modules in Python are simply Python files with a .py extension. The name of the module will be the name of the file. A Python module can have a set of functions, classes or variables defined and implemented. \u200b ref: https://www.learnpython.org/en/Modules_and_Packages Create the File STEP 1 . CREATE a file named session.py in the dnac folder This Python file (module) will sub-class the requests.Session class and serve as our object to handle all things related to the HTTP(S) session with DNA Center. STEP 2 . ADD the base session text Note The requests package is the de facto standard Python package for making HTTP requests. You can read more about the Python package requests #!/usr/bin/env python import requests class dnacApiSession ( requests . Session ): \"\"\" Session Wrapper for DNAC \"\"\" def __init__ ( self , * args , ** kwargs ): \"\"\" Initialize Object \"\"\" super ( dnacApiSession , self ) . __init__ ( * args , ** kwargs ) self . headers . update ( { 'Content-Type' : 'application/json' } ) def set_basic_auth ( self , username , password ): \"\"\" Set the auth attribute of the session object params: username (str) - login username password (str) - login password \"\"\" self . auth = ( username , password ) What does this do? This Python module illustrates the use of sub-classing, a key concept in object-oriented programming, to utilize all of the existing functionality in the requests package while providing the ability to customize settings for our specific use case. The __init__ method calls the __init__ method of the parent class ( requests.sessions.Session ) and sets a header value for all calls. The set_basic_auth method sets the attribute named auth of the Session object. This simple example illustrates the power and simplicity of object oriented programming.","title":"The Session Module"},{"location":"module-2/#create-a-python-module-session","text":"Packages are directories that contain the __init.py__ file and some number of Python files called modules. This section will guide you through creating the first Python module to accomplish the REST Client functionality. Modules in Python are simply Python files with a .py extension. The name of the module will be the name of the file. A Python module can have a set of functions, classes or variables defined and implemented. \u200b ref: https://www.learnpython.org/en/Modules_and_Packages","title":"Create a Python Module: session"},{"location":"module-2/#create-the-file","text":"STEP 1 . CREATE a file named session.py in the dnac folder This Python file (module) will sub-class the requests.Session class and serve as our object to handle all things related to the HTTP(S) session with DNA Center. STEP 2 . ADD the base session text Note The requests package is the de facto standard Python package for making HTTP requests. You can read more about the Python package requests #!/usr/bin/env python import requests class dnacApiSession ( requests . Session ): \"\"\" Session Wrapper for DNAC \"\"\" def __init__ ( self , * args , ** kwargs ): \"\"\" Initialize Object \"\"\" super ( dnacApiSession , self ) . __init__ ( * args , ** kwargs ) self . headers . update ( { 'Content-Type' : 'application/json' } ) def set_basic_auth ( self , username , password ): \"\"\" Set the auth attribute of the session object params: username (str) - login username password (str) - login password \"\"\" self . auth = ( username , password )","title":"Create the File"},{"location":"module-2/#what-does-this-do","text":"This Python module illustrates the use of sub-classing, a key concept in object-oriented programming, to utilize all of the existing functionality in the requests package while providing the ability to customize settings for our specific use case. The __init__ method calls the __init__ method of the parent class ( requests.sessions.Session ) and sets a header value for all calls. The set_basic_auth method sets the attribute named auth of the Session object. This simple example illustrates the power and simplicity of object oriented programming.","title":"What does this do?"},{"location":"module-3/","text":"Create a Python Module : client The job of the client module is to wrap the REST endpoints available on the platform. This section will build the API wrapper module using a combination of resources as a reference. DNA Center API Documentation Python Classes Create the Class STEP 1. CREATE a file named client.py in the dnac/ directory (the package) Python modules are just files with the .py extension. STEP 2. OPEN the dnac/client.py file in your editor STEP 3. import the REST Client you created using relative imports from .session import dnacApiSession Read More on Relative Imports Here is a reference for Relative Imports in Python STEP 4. CREATE a class named dnaCenterApi class dnaCenterApi : STEP 5. DEFINE a method named __init__ def __init__ ( self , host , username , password , verify = False ): \"\"\" Initializer \"\"\" self . session = dnacApiSession () self . host = host self . base_url = f \"https:// { host } \" if username and password : self . session . init_basic_auth ( username , password ) self . get_token () STEP 6. DEFINE a method named get_token def get_token ( self ): \"\"\" Authenticate to DNA Center and generate a token \"\"\" _response = self . session . post ( self . build_url ( '/dna/system/api/v1/auth/token' ) ) if _response . ok : print ( f \"Successfully established a session with: { self . host } \" ) self . session . headers . update ( { 'x-auth-token' : _response . json () . get ( 'Token' ) } ) STEP 7. DEFINE a method named build_url def build_url ( self , resource ): \"\"\" Build the url \"\"\" return self . base_url + resource STEP 8. DEFINE a method named _make_request def _make_request ( self , method , url ): \"\"\" make rest request \"\"\" results = self . session . request ( method , url , data = None ) if results . ok : return results . json () results . raise_for_status () You did it! Launch iPython and see if your code works. Add API Wrapper Method to Get Sites Now that the basic mechanics of your API Client work and you can establish a session with a DNA Center it's time to add some functions to target specific REST Endpoints. The first endpoint that will be added is the site endpoint. def get_sites ( self ): \"\"\" Retreives site(s) from DNA Center \"\"\" resource = \"/dna/intent/api/v1/site\" return self . _make_request ( 'GET' , self . build_url ( resource )) Add API Wrapper Method to Get Network Devices def get_network_devices ( self ): \"\"\" Retrieves network devices from DNA Center \"\"\" resource = \"/dna/intent/api/v1/network-device\" return self . _make_request ( 'GET' , self . build_url ( resource )) Full File #!/usr/bin/env python from .session import dnacApiSession class dnaCenterApi : \"\"\" DNA Center API Wrapper Class \"\"\" def __init__ ( self , host , username , password , verify = False ): \"\"\" Initializer \"\"\" self . session = dnacApiSession () self . host = host self . base_url = f \"https:// { host } \" if username and password : self . session . init_basic_auth ( username , password ) self . get_token () def get_token ( self ): \"\"\" Authenticate to DNA Center and generate a token \"\"\" _response = self . session . post ( self . build_url ( '/dna/system/api/v1/auth/token' ) ) if _response . ok : print ( f \"Successfully established a session with: { self . host } \" ) self . session . headers . update ( { 'x-auth-token' : _response . json () . get ( 'Token' ) } ) def build_url ( self , resource ): \"\"\" Build the url \"\"\" return self . base_url + resource def _make_request ( self , method , url ): \"\"\" make rest request \"\"\" results = self . session . request ( method , url , data = None ) if results . ok : return results . json () results . raise_for_status () # API Endpoints def get_sites ( self ): \"\"\" Retreives site(s) from DNA Center \"\"\" resource = \"/dna/intent/api/v1/site\" return self . _make_request ( 'GET' , self . build_url ( resource )) def get_network_devices ( self ): \"\"\" Retrieves network devices from DNA Center \"\"\" resource = \"/dna/intent/api/v1/network-device\" return self . _make_request ( 'GET' , self . build_url ( resource ))","title":"The API Wrapper Module"},{"location":"module-3/#create-a-python-module-client","text":"The job of the client module is to wrap the REST endpoints available on the platform. This section will build the API wrapper module using a combination of resources as a reference. DNA Center API Documentation Python Classes","title":"Create a Python Module : client"},{"location":"module-3/#create-the-class","text":"STEP 1. CREATE a file named client.py in the dnac/ directory (the package) Python modules are just files with the .py extension. STEP 2. OPEN the dnac/client.py file in your editor STEP 3. import the REST Client you created using relative imports from .session import dnacApiSession Read More on Relative Imports Here is a reference for Relative Imports in Python STEP 4. CREATE a class named dnaCenterApi class dnaCenterApi : STEP 5. DEFINE a method named __init__ def __init__ ( self , host , username , password , verify = False ): \"\"\" Initializer \"\"\" self . session = dnacApiSession () self . host = host self . base_url = f \"https:// { host } \" if username and password : self . session . init_basic_auth ( username , password ) self . get_token () STEP 6. DEFINE a method named get_token def get_token ( self ): \"\"\" Authenticate to DNA Center and generate a token \"\"\" _response = self . session . post ( self . build_url ( '/dna/system/api/v1/auth/token' ) ) if _response . ok : print ( f \"Successfully established a session with: { self . host } \" ) self . session . headers . update ( { 'x-auth-token' : _response . json () . get ( 'Token' ) } ) STEP 7. DEFINE a method named build_url def build_url ( self , resource ): \"\"\" Build the url \"\"\" return self . base_url + resource STEP 8. DEFINE a method named _make_request def _make_request ( self , method , url ): \"\"\" make rest request \"\"\" results = self . session . request ( method , url , data = None ) if results . ok : return results . json () results . raise_for_status () You did it! Launch iPython and see if your code works.","title":"Create the Class"},{"location":"module-3/#add-api-wrapper-method-to-get-sites","text":"Now that the basic mechanics of your API Client work and you can establish a session with a DNA Center it's time to add some functions to target specific REST Endpoints. The first endpoint that will be added is the site endpoint. def get_sites ( self ): \"\"\" Retreives site(s) from DNA Center \"\"\" resource = \"/dna/intent/api/v1/site\" return self . _make_request ( 'GET' , self . build_url ( resource ))","title":"Add API Wrapper Method to Get Sites"},{"location":"module-3/#add-api-wrapper-method-to-get-network-devices","text":"def get_network_devices ( self ): \"\"\" Retrieves network devices from DNA Center \"\"\" resource = \"/dna/intent/api/v1/network-device\" return self . _make_request ( 'GET' , self . build_url ( resource ))","title":"Add API Wrapper Method to Get Network Devices"},{"location":"module-3/#full-file","text":"#!/usr/bin/env python from .session import dnacApiSession class dnaCenterApi : \"\"\" DNA Center API Wrapper Class \"\"\" def __init__ ( self , host , username , password , verify = False ): \"\"\" Initializer \"\"\" self . session = dnacApiSession () self . host = host self . base_url = f \"https:// { host } \" if username and password : self . session . init_basic_auth ( username , password ) self . get_token () def get_token ( self ): \"\"\" Authenticate to DNA Center and generate a token \"\"\" _response = self . session . post ( self . build_url ( '/dna/system/api/v1/auth/token' ) ) if _response . ok : print ( f \"Successfully established a session with: { self . host } \" ) self . session . headers . update ( { 'x-auth-token' : _response . json () . get ( 'Token' ) } ) def build_url ( self , resource ): \"\"\" Build the url \"\"\" return self . base_url + resource def _make_request ( self , method , url ): \"\"\" make rest request \"\"\" results = self . session . request ( method , url , data = None ) if results . ok : return results . json () results . raise_for_status () # API Endpoints def get_sites ( self ): \"\"\" Retreives site(s) from DNA Center \"\"\" resource = \"/dna/intent/api/v1/site\" return self . _make_request ( 'GET' , self . build_url ( resource )) def get_network_devices ( self ): \"\"\" Retrieves network devices from DNA Center \"\"\" resource = \"/dna/intent/api/v1/network-device\" return self . _make_request ( 'GET' , self . build_url ( resource ))","title":"Full File"},{"location":"module-4/","text":"Create a Python Script Now that you have created the minimum elements of your DNAC SDK you can use it in a python script just like any other module or package. STEP 1. CREATE a file named test_dnac_sdk.py STEP 2. PASTE the following code into the file from pprint import pprint from dnac.client import dnaCenterApi dnac = dnaCenterApi ( 'sandboxdnac2.cisco.com' , 'devnetuser' , 'Cisco123!' , verify = False ) sites = dnac . get_sites () pprint ( sites ) devices = dnac . get_network_devices () pprint ( devices ) STEP 3. SAVE the file STEP 4. EXECUTE the script python test_dnac_sdk.py","title":"The Calling Script"},{"location":"module-4/#create-a-python-script","text":"Now that you have created the minimum elements of your DNAC SDK you can use it in a python script just like any other module or package. STEP 1. CREATE a file named test_dnac_sdk.py STEP 2. PASTE the following code into the file from pprint import pprint from dnac.client import dnaCenterApi dnac = dnaCenterApi ( 'sandboxdnac2.cisco.com' , 'devnetuser' , 'Cisco123!' , verify = False ) sites = dnac . get_sites () pprint ( sites ) devices = dnac . get_network_devices () pprint ( devices ) STEP 3. SAVE the file STEP 4. EXECUTE the script python test_dnac_sdk.py","title":"Create a Python Script"},{"location":"next_steps/","text":"Action Required! Now that you have seen a walk through of creating a basic Python SDK using your knowledge of version control, Python, APIs, etc try to create your own SDK for learning focused on one of the other Cisco Products: Webex Teams Meraki Cisco SD WAN Cisco ACI The goal is to practice writing code in Python, reading and translating API documentation, and building the muscle memory that will make you success in your future development projects.","title":"Call to Action"},{"location":"next_steps/#action-required","text":"Now that you have seen a walk through of creating a basic Python SDK using your knowledge of version control, Python, APIs, etc try to create your own SDK for learning focused on one of the other Cisco Products: Webex Teams Meraki Cisco SD WAN Cisco ACI The goal is to practice writing code in Python, reading and translating API documentation, and building the muscle memory that will make you success in your future development projects.","title":"Action Required!"}]}