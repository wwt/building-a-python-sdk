{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Learn to Build a Basic Python SDK Practice is critical in acquiring any new skill and automation is no different. This repository will walk you through the creation of a simple, non-production Python SDK. The goal is not to create a production quality Python SDK since these already exist for many of the Cisco products, but rather to provide some guided practice using many of the requisite skills of an automation engineer today. Some of the skills you will practice in this walk-through are: Docker and Development Environments Version Control Basic Linux Commands Python Fundamentals Common Data Formats (specifically JSON) Development Design Patterns and Methodology Through the remainder of this guide you will be walked, step-by-step, through the process of building your own SDK. Prerequisite Skills This walk-through assumes knowledge of: git Docker Python Fundamentals REST APIs","title":"Learn to Build a Basic Python SDK"},{"location":"#learn-to-build-a-basic-python-sdk","text":"Practice is critical in acquiring any new skill and automation is no different. This repository will walk you through the creation of a simple, non-production Python SDK. The goal is not to create a production quality Python SDK since these already exist for many of the Cisco products, but rather to provide some guided practice using many of the requisite skills of an automation engineer today. Some of the skills you will practice in this walk-through are: Docker and Development Environments Version Control Basic Linux Commands Python Fundamentals Common Data Formats (specifically JSON) Development Design Patterns and Methodology Through the remainder of this guide you will be walked, step-by-step, through the process of building your own SDK.","title":"Learn to Build a Basic Python SDK"},{"location":"#prerequisite-skills","text":"This walk-through assumes knowledge of: git Docker Python Fundamentals REST APIs","title":"Prerequisite Skills"},{"location":"conclusion/","text":"","title":"Conclusion"},{"location":"module-0/","text":"Clone the Repo One of the very first skills you learn when starting the journey to becoming an automation engineer is version control. There are multiple ways to clone a repository so feel free to use whatever method you are comfortable with. The steps below show how to clone a repo from a terminal window. STEPS NAVIGATE to the repo on GitHub devasc-building-a-python-sdk CLICK the Code button SELECT the transport (HTTPS or SSH) CLICK the Copy icon OPEN a new Terminal PASTE git clone plus that string into your Terminal !!! example SSH git clone git@github.com:wwt/devasc-building-a-python-sdk.git \u200b HTTPS git clone https://github.com/wwt/devasc-building-a-python-sdk.git !!! important The command above will clone down the repository creating a subfolder with the name of the repo in the folder where you ran the command. OPEN the new Folder in Visual Studio Code using Open Folder This repo contains a starting framework from which you will expand to build a Python SDK. The repository also contains a portable development environment in the form of a Dockerfile , requirements.txt , and .devcontainer.json files. If you are using Visual Studio Code you will be prompted to \"reopen in container\" when the .devcontainer.json file is detected. If you are not using Visual Studio Code you will need to build the Docker image, then launch it to utilize.","title":"Setup"},{"location":"module-0/#clone-the-repo","text":"One of the very first skills you learn when starting the journey to becoming an automation engineer is version control. There are multiple ways to clone a repository so feel free to use whatever method you are comfortable with. The steps below show how to clone a repo from a terminal window.","title":"Clone the Repo"},{"location":"module-0/#steps","text":"NAVIGATE to the repo on GitHub devasc-building-a-python-sdk CLICK the Code button SELECT the transport (HTTPS or SSH) CLICK the Copy icon OPEN a new Terminal PASTE git clone plus that string into your Terminal !!! example SSH git clone git@github.com:wwt/devasc-building-a-python-sdk.git \u200b HTTPS git clone https://github.com/wwt/devasc-building-a-python-sdk.git !!! important The command above will clone down the repository creating a subfolder with the name of the repo in the folder where you ran the command. OPEN the new Folder in Visual Studio Code using Open Folder This repo contains a starting framework from which you will expand to build a Python SDK. The repository also contains a portable development environment in the form of a Dockerfile , requirements.txt , and .devcontainer.json files. If you are using Visual Studio Code you will be prompted to \"reopen in container\" when the .devcontainer.json file is detected. If you are not using Visual Studio Code you will need to build the Docker image, then launch it to utilize.","title":"STEPS"},{"location":"module-1/","text":"Create a Python Package In this section you will create a Python package that will become your DNA Center SDK. Packages are namespaces which contain multiple packages and modules themselves. They are simply directories, but with a twist. Each package in Python is a directory which MUST contain a special file called __init__.py . This file can be empty, and it indicates that the directory it contains is a Python package, so it can be imported the same way a module can be imported. ref: https://www.learnpython.org/en/Modules_and_Packages Steps STEP 1. CREATE a folder named dnac mkdir dnac STEP 2. CREATE a file named init .py in the dnac folder touch dnac/__init__.py STEP 3. MODIFY the file permissions to add execute chmod +x dnac/__init__.py Can you import this package? If you completed these steps you can now import your package in the python interpreter.","title":"Python Package"},{"location":"module-1/#create-a-python-package","text":"In this section you will create a Python package that will become your DNA Center SDK. Packages are namespaces which contain multiple packages and modules themselves. They are simply directories, but with a twist. Each package in Python is a directory which MUST contain a special file called __init__.py . This file can be empty, and it indicates that the directory it contains is a Python package, so it can be imported the same way a module can be imported. ref: https://www.learnpython.org/en/Modules_and_Packages","title":"Create a Python Package"},{"location":"module-1/#steps","text":"STEP 1. CREATE a folder named dnac mkdir dnac STEP 2. CREATE a file named init .py in the dnac folder touch dnac/__init__.py STEP 3. MODIFY the file permissions to add execute chmod +x dnac/__init__.py Can you import this package? If you completed these steps you can now import your package in the python interpreter.","title":"Steps"},{"location":"module-2/","text":"Create a Python Module: REST Client Packages are directories that contain the __init.py_ file and some number of Python files called modules. Modules in Python are simply Python files with a .py extension. The name of the module will be the name of the file. A Python module can have a set of functions, classes or variables defined and implemented. \u200b ref: https://www.learnpython.org/en/Modules_and_Packages Create the File STEP 1 . CREATE a file named client.py in the dnac folder This file will be our REST Client in our SDK and will be responsible for all REST functionality including authentication and requests (like PUT/POST/GET/DELETE). STEP 2 . ADD the base client text This is a REST client and will utilize the requests package for making REST calls. The requests package is the de facto standard Python package for making HTTP requests. You can read more about the Python package requests #!/usr/bin/env python import requests from requests.packages.urllib3.exceptions import InsecureRequestWarning requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) LOGIN_ENDPOINT = '/dna/system/api/v1/auth/token' DISABLE_INSECURE_WARNINGS = True class dnacClient (): def __init__ ( self , host , username , password , verify = False ): \"\"\" Initiallize the Client \"\"\" self . host = host self . username = username self . password = password self . session = None self . verify = verify self . login_url = f \"https:// { host }{ LOGIN_ENDPOINT } \" self . token = '' if DISABLE_INSECURE_WARNINGS : requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) self . create_session ( host , username , password , verify ) Create Session Method This method will be used during the instantiation of the object from our class definition. It will establish a session with the DNA Center appliance and obtain a valid token for all subsequent call to that DNA Center. STEP 1. PASTE the following into the client.py file def create_session ( self , host , username , password , verify ): \"\"\" create session to DNA Center \"\"\" _session = requests . session () _session . verify = verify _session . auth = ( username , password ) _login_results = _session . post ( self . login_url ) if _login_results . ok : self . session = _session # self.api = dnaCenterApi(self) self . token = _login_results . json () . get ( \"Token\" ) print ( f \"successfully established session to { host } \" ) else : print ( \"failed to establish session: \" , _session ) Make Request Method STEP 1. PASTE the following into the client.py file def _make_request ( self , method , url ): \"\"\" make rest request \"\"\" results = self . session . request ( method , url , data = None ) return results Full File #!/usr/bin/env python import requests from requests.packages.urllib3.exceptions import InsecureRequestWarning requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) LOGIN_ENDPOINT = '/dna/system/api/v1/auth/token' DISABLE_INSECURE_WARNINGS = True class dnacClient (): def __init__ ( self , host , username , password , verify = False ): \"\"\" Initiallize the Client \"\"\" self . host = host self . username = username self . password = password self . session = None self . verify = verify # self.api = None self . login_url = f \"https:// { host }{ LOGIN_ENDPOINT } \" self . token = '' if DISABLE_INSECURE_WARNINGS : requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) self . create_session ( host , username , password , verify ) def create_session ( self , host , username , password , verify ): \"\"\" create session to DNA Center \"\"\" _session = requests . session () _session . verify = verify _session . auth = ( username , password ) _login_results = _session . post ( self . login_url ) if _login_results . ok : self . session = _session # self.api = dnaCenterApi(self) self . token = _login_results . json () . get ( \"Token\" ) print ( f \"successfully established session to { host } \" ) else : print ( \"failed to establish session: \" , _session ) def _make_request ( self , method , url ): \"\"\" make rest request \"\"\" results = self . session . request ( method , url , data = None ) return results","title":"REST Client Module"},{"location":"module-2/#create-a-python-module-rest-client","text":"Packages are directories that contain the __init.py_ file and some number of Python files called modules. Modules in Python are simply Python files with a .py extension. The name of the module will be the name of the file. A Python module can have a set of functions, classes or variables defined and implemented. \u200b ref: https://www.learnpython.org/en/Modules_and_Packages","title":"Create a Python Module: REST Client"},{"location":"module-2/#create-the-file","text":"STEP 1 . CREATE a file named client.py in the dnac folder This file will be our REST Client in our SDK and will be responsible for all REST functionality including authentication and requests (like PUT/POST/GET/DELETE). STEP 2 . ADD the base client text This is a REST client and will utilize the requests package for making REST calls. The requests package is the de facto standard Python package for making HTTP requests. You can read more about the Python package requests #!/usr/bin/env python import requests from requests.packages.urllib3.exceptions import InsecureRequestWarning requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) LOGIN_ENDPOINT = '/dna/system/api/v1/auth/token' DISABLE_INSECURE_WARNINGS = True class dnacClient (): def __init__ ( self , host , username , password , verify = False ): \"\"\" Initiallize the Client \"\"\" self . host = host self . username = username self . password = password self . session = None self . verify = verify self . login_url = f \"https:// { host }{ LOGIN_ENDPOINT } \" self . token = '' if DISABLE_INSECURE_WARNINGS : requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) self . create_session ( host , username , password , verify )","title":"Create the File"},{"location":"module-2/#create-session-method","text":"This method will be used during the instantiation of the object from our class definition. It will establish a session with the DNA Center appliance and obtain a valid token for all subsequent call to that DNA Center. STEP 1. PASTE the following into the client.py file def create_session ( self , host , username , password , verify ): \"\"\" create session to DNA Center \"\"\" _session = requests . session () _session . verify = verify _session . auth = ( username , password ) _login_results = _session . post ( self . login_url ) if _login_results . ok : self . session = _session # self.api = dnaCenterApi(self) self . token = _login_results . json () . get ( \"Token\" ) print ( f \"successfully established session to { host } \" ) else : print ( \"failed to establish session: \" , _session )","title":"Create Session Method"},{"location":"module-2/#make-request-method","text":"STEP 1. PASTE the following into the client.py file def _make_request ( self , method , url ): \"\"\" make rest request \"\"\" results = self . session . request ( method , url , data = None ) return results","title":"Make Request Method"},{"location":"module-2/#full-file","text":"#!/usr/bin/env python import requests from requests.packages.urllib3.exceptions import InsecureRequestWarning requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) LOGIN_ENDPOINT = '/dna/system/api/v1/auth/token' DISABLE_INSECURE_WARNINGS = True class dnacClient (): def __init__ ( self , host , username , password , verify = False ): \"\"\" Initiallize the Client \"\"\" self . host = host self . username = username self . password = password self . session = None self . verify = verify # self.api = None self . login_url = f \"https:// { host }{ LOGIN_ENDPOINT } \" self . token = '' if DISABLE_INSECURE_WARNINGS : requests . packages . urllib3 . disable_warnings ( InsecureRequestWarning ) self . create_session ( host , username , password , verify ) def create_session ( self , host , username , password , verify ): \"\"\" create session to DNA Center \"\"\" _session = requests . session () _session . verify = verify _session . auth = ( username , password ) _login_results = _session . post ( self . login_url ) if _login_results . ok : self . session = _session # self.api = dnaCenterApi(self) self . token = _login_results . json () . get ( \"Token\" ) print ( f \"successfully established session to { host } \" ) else : print ( \"failed to establish session: \" , _session ) def _make_request ( self , method , url ): \"\"\" make rest request \"\"\" results = self . session . request ( method , url , data = None ) return results","title":"Full File"},{"location":"module-3/","text":"Create a Python Module : API The job of the API module is to wrap the REST endpoints available on the platform. This section will build the API wrapper module using a combination of resources as a reference. DNA Center API Documentation Python Classes Create the Class CREATE a file named api.py in the dnac/ directory (the package) OPEN the dnac/api.py file in your editor import the REST Client you created using relative imports from .client import dnacClient CREATE a class named dnaCenterApi class dnaCenterApi : DEFINE a method named init def __init__ ( self , host , username , password , verify = False ): self . client = dnacClient ( host , username = username , password = password ) You did it! Launch iPython and see if your code works. Add a Method def get_sites ( self ): resource = \"/dna/intent/api/v1/site\" _url = f \"https:// { self . client . host }{ resource } \" self . client . session . headers = { 'x-auth-token' : self . client . token } r = self . client . _make_request ( 'POST' , _url ) if r . ok : return r . json () Add another Method def get_network_devices ( self ): \"\"\" get network devices \"\"\" resource = \"/dna/intent/api/v1/network-device\" _url = f \"https:// { self . client . host }{ resource } \" self . client . session . headers = { 'x-auth-token' : self . client . token } r = self . client . _make_request ( 'GET' , _url ) if r . ok : return r . json () Full File from .client import dnacClient class dnaCenterApi : def __init__ ( self , host , username , password , verify = False ): self . client = dnacClient ( host , username = username , password = password ) def get_sites ( self ): resource = \"/dna/intent/api/v1/site\" _url = f \"https:// { self . client . host }{ resource } \" self . client . session . headers = { 'x-auth-token' : self . client . token } r = self . client . _make_request ( 'POST' , _url ) if r . ok : return r . json () def get_network_devices ( self ): \"\"\" get network devices \"\"\" resource = \"/dna/intent/api/v1/network-device\" _url = f \"https:// { self . client . host }{ resource } \" self . client . session . headers = { 'x-auth-token' : self . client . token } r = self . client . _make_request ( 'GET' , _url ) if r . ok : return r . json ()","title":"REST API Wrapper Module"},{"location":"module-3/#create-a-python-module-api","text":"The job of the API module is to wrap the REST endpoints available on the platform. This section will build the API wrapper module using a combination of resources as a reference. DNA Center API Documentation Python Classes","title":"Create a Python Module : API"},{"location":"module-3/#create-the-class","text":"CREATE a file named api.py in the dnac/ directory (the package) OPEN the dnac/api.py file in your editor import the REST Client you created using relative imports from .client import dnacClient CREATE a class named dnaCenterApi class dnaCenterApi : DEFINE a method named init def __init__ ( self , host , username , password , verify = False ): self . client = dnacClient ( host , username = username , password = password ) You did it! Launch iPython and see if your code works.","title":"Create the Class"},{"location":"module-3/#add-a-method","text":"def get_sites ( self ): resource = \"/dna/intent/api/v1/site\" _url = f \"https:// { self . client . host }{ resource } \" self . client . session . headers = { 'x-auth-token' : self . client . token } r = self . client . _make_request ( 'POST' , _url ) if r . ok : return r . json ()","title":"Add a Method"},{"location":"module-3/#add-another-method","text":"def get_network_devices ( self ): \"\"\" get network devices \"\"\" resource = \"/dna/intent/api/v1/network-device\" _url = f \"https:// { self . client . host }{ resource } \" self . client . session . headers = { 'x-auth-token' : self . client . token } r = self . client . _make_request ( 'GET' , _url ) if r . ok : return r . json ()","title":"Add another Method"},{"location":"module-3/#full-file","text":"from .client import dnacClient class dnaCenterApi : def __init__ ( self , host , username , password , verify = False ): self . client = dnacClient ( host , username = username , password = password ) def get_sites ( self ): resource = \"/dna/intent/api/v1/site\" _url = f \"https:// { self . client . host }{ resource } \" self . client . session . headers = { 'x-auth-token' : self . client . token } r = self . client . _make_request ( 'POST' , _url ) if r . ok : return r . json () def get_network_devices ( self ): \"\"\" get network devices \"\"\" resource = \"/dna/intent/api/v1/network-device\" _url = f \"https:// { self . client . host }{ resource } \" self . client . session . headers = { 'x-auth-token' : self . client . token } r = self . client . _make_request ( 'GET' , _url ) if r . ok : return r . json ()","title":"Full File"},{"location":"module-4/","text":"Create a Python Script Now that you have created the minimum elements of your DNAC SDK you can use it in a python script just like any other module or package. STEP 1. CREATE a file named test_dnac_sdk.py STEP 2. PASTE the following code into the file #!/usr/bin/env python from pprint import pprint from dnac.dnac_api import dnaCenterApi dnac = dnaCenterApi ( 'sandboxdnac2.cisco.com' , 'devnetuser' , 'Cisco123!' ) # dnac.get_sites() devices = dnac . get_network_devices () pprint ( devices ) STEP 3. SAVE the file STEP 4. EXECUTE the script python test_dnac_sdk.py","title":"The Calling Script"},{"location":"module-4/#create-a-python-script","text":"Now that you have created the minimum elements of your DNAC SDK you can use it in a python script just like any other module or package. STEP 1. CREATE a file named test_dnac_sdk.py STEP 2. PASTE the following code into the file #!/usr/bin/env python from pprint import pprint from dnac.dnac_api import dnaCenterApi dnac = dnaCenterApi ( 'sandboxdnac2.cisco.com' , 'devnetuser' , 'Cisco123!' ) # dnac.get_sites() devices = dnac . get_network_devices () pprint ( devices ) STEP 3. SAVE the file STEP 4. EXECUTE the script python test_dnac_sdk.py","title":"Create a Python Script"}]}